loadscript Uncertainty
-- $Title: Measurement Uncertainty
-- $Product: DAQ6510, DMM6500
-- $Tag: Measurement uncertainty, Tolerance, Error margin
-- $Description: Displays the measurement uncertainty of the currently measured value
-- $Requires: v1.0.01f
-- $Icon: uncertainty_icon
-- Last Updated: $Date: 2024-10-19
--[[
Script: Uncertainty.tspa
Written by: Johannes Raschke
`
***********************************************************
*** Copyright 2018 Tektronix, Inc.                      ***
*** See www.tek.com/sample-license for licensing terms. ***
***********************************************************

TODO: Start working on actual functionality
]]--
function precheck() -- Checks that the script will work with the current settings
    user_func = dmm.measure.func
    if user_func == dmm.FUNC_NONE then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Digitize functions, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end
    elseif user_func == dmm.FUNC_TEMPERATURE then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Temperature function, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end
    elseif user_func == dmm.FUNC_CONTINUITY then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Continuity function, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end    
    elseif user_func == dmm.FUNC_DCV_RATIO then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Ration function, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end    
    end
end -- precheck()

function createMainScreen() -- Create grid lines on the swipe screen
	-- Create grid line for each reading.
    local gridLines = {}
	
    -- Create swipe screen
    swipe_id = display.create(display.SCREEN_HOME, display.OBJ_SWIPE, 'Uncertainty')
    
    -- Column lines
	gridLines[1] = display.create(swipe_id, display.OBJ_LINE, 1, 5, 1, 200)
	gridLines[2] = display.create(swipe_id, display.OBJ_LINE, 250, 5, 250, 200)
    gridLines[3] = display.create(swipe_id, display.OBJ_LINE, 620, 5, 620, 200)
	-- Row lines
	gridLines[4] = display.create(swipe_id, display.OBJ_LINE, 1, 50, 620, 50)
	gridLines[5] = display.create(swipe_id, display.OBJ_LINE, 1, 100, 620, 100)
	gridLines[6] = display.create(swipe_id, display.OBJ_LINE, 1, 150, 620, 150)

	for i = 1, table.getn(gridLines) do
		display.setcolor(gridLines[i], 0x7f7f7f)
	end

    -- Now Create objects on the swipe screen that aren't the grid lines
    displayItems[1] = display.create(swipe_id, display.OBJ_TEXT, 12, 35, "Abs. uncertainty", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	displayItems[2] = display.create(swipe_id, display.OBJ_TEXT, 12, 85,   "Rel. uncertainty", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	-- displayItems[3] = display.create(swipe_id, display.OBJ_TEXT, 12, 135,  formattedReadings[3], display.COLOR_MEASUREMENT, display.FONT_LARGE)
	-- displayItems[4] = display.create(swipe_id, display.OBJ_TEXT, 12, 185,  formattedReadings[4], display.COLOR_MEASUREMENT, display.FONT_LARGE)
	displayItems[5] = display.create(swipe_id, display.OBJ_TEXT, 251, 35,  "---", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	displayItems[6] = display.create(swipe_id, display.OBJ_TEXT, 251, 85,  "---", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	-- displayItems[7] = display.create(swipe_id, display.OBJ_TEXT, 251, 135, formattedReadings[7], display.COLOR_MEASUREMENT, display.FONT_LARGE)
	-- displayItems[8] = display.create(swipe_id, display.OBJ_TEXT, 251, 185, formattedReadings[8], display.COLOR_MEASUREMENT, display.FONT_LARGE)
    screen_is_setup = 1 --if the script is restarted this will stop multiple swipe screens being created
end

function configure_unit()    
    local func = dmm.measure.func
        if     func == dmm.FUNC_DC_VOLTAGE      then uncertaintyUnit = buffer.UNIT_VOLT uncertaintyUnitString = "V"
        elseif func == dmm.FUNC_DC_CURRENT      then uncertaintyUnit = buffer.UNIT_AMP uncertaintyUnitString = "A"
        elseif func == dmm.FUNC_RESISTANCE      then uncertaintyUnit = buffer.UNIT_OHM uncertaintyUnitString = "\018"
        elseif func == dmm.FUNC_4W_RESISTANCE   then uncertaintyUnit = buffer.UNIT_OHM uncertaintyUnitString = "\018"
        elseif func == dmm.FUNC_CAPACITANCE     then uncertaintyUnit = buffer.UNIT_FARAD uncertaintyUnitString = "F"
        elseif func == dmm.FUNC_AC_VOLTAGE      then uncertaintyUnit = buffer.UNIT_VOLT_AC uncertaintyUnitString = "V"
        elseif func == dmm.FUNC_AC_CURRENT      then uncertaintyUnit = buffer.UNIT_AMP_AC uncertaintyUnitString = "A"
        elseif func == dmm.FUNC_ACV_FREQUENCY   then uncertaintyUnit = buffer.UNIT_HERTZ uncertaintyUnitString = "Hz"
        elseif func == dmm.FUNC_ACV_PERIOD      then uncertaintyUnit = buffer.UNIT_SECOND uncertaintyUnitString = "s"
        else uncertaintyUnit = buffer.UNIT_NONE uncertaintyUnitString = "INVALID"
        end    
end

function setup() -- Calls other init functions and creates the timers
    -- Recover user's previous function
    displayItems = {} -- Table that contains ids of the text object that display the values, filled in print_uncertainties()
    uncertaintyUnit = buffer.UNIT_NONE
    uncertaintyUnitString = ""    
    uncertaintyBuffer = buffer.make(10, buffer.STYLE_WRITABLE) -- we don't really need a buffer, but I want to be able to use bufferVar.formattedreadings later. 10 is the min. size.
    uncertaintyBuffer.fillmode = buffer.FILL_CONTINUOUS
    buffer.write.format(uncertaintyBuffer, uncertaintyUnit, absUncertaintyDisplayDigits) -- buffer.write.format(bufferVar, units, displayDigits)
    dmm.measure.func = user_func
    
    --if screen_is_setup ~= 1 
    --then
         createMainScreen()
    --end --prevents multiple swipe screens being created
    
    
    -- fomattedReadings stores the text values to display, length 9
    -- formattedReadings = {"-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21", "-\21-\21.\21-\21-\21-\21-\21"}    
       
    -- Setup timers for ongoing stuff
	read_timer_id = display.create(swipe_id, display.OBJ_TIMER, 0.5, display.TIMER_FOREVER, "takeReading()")
	--garbage_timer_id = display.create(swipe_id, display.OBJ_TIMER, 60, display.TIMER_FOREVER, "collectgarbage()")
    
    display.changescreen(display.SCREEN_HOME) -- Go to the newly created screen
    display.changescreen(swipe_id)

    takeReading()
end

function check_valid(reading) -- Takes the most recent reading and verifies it's a reading I want
    if reading == 9.9e+37 then return false end -- Don't allow overflows  
    return true -- Reading is valid
end

function takeReading() -- take a reading and display the uncertainty
    dmm.measure.read(defbuffer1)
    configure_unit()
    update_uncertainties();
end

function getDcvUncertainty(reading, range)
    -- return measurement uncertainty in V
    -- using only 1 year specs for now...
    if range == 0.1 then 
        return reading * 0.0030/100 + range * 0.0035/100
    elseif range == 1 then
        return reading * 0.0025/100 + range * 0.0006/100
    elseif range == 10 then
        return reading * 0.0025/100 + range * 0.0005/100
    elseif range == 100 then
        return reading * 0.0040/100 + range * 0.0006/100
    elseif range == 1000 then
        return reading * 0.0040/100 + range * 0.0006/100
    else return 666 -- error
    end
end

function update_uncertainties() -- Updates the number display
    local reading = defbuffer1[defbuffer1.endindex] -- the last reading that was taken by the meter
    local range = dmm.measure.range

    if check_valid(reading) == false then 
        display.settext(displayItems[5], "Overflow")
    else    
        local uncertainty = getDcvUncertainty(reading, range)        
        --buffer.write.reading(uncertaintyBuffer, round(uncertainty, absUncertaintyRoundingDigits))
        buffer.write.reading(uncertaintyBuffer, uncertainty)
        display.settext(displayItems[5], tostring(uncertaintyBuffer.formattedreadings[uncertaintyBuffer.endindex]) .. uncertaintyUnitString) -- absolute uncertainty
        display.settext(displayItems[6], tostring(round(uncertainty/reading*1e6, relUncertaintyRoundingDigits)) .. " " .. "ppm") -- relative uncertainty
    end
    --display.settext(displayItems[2], "Updated!")
    -- display.settext(displayItems[3], formattedReadings[3])
    -- display.settext(displayItems[4], formattedReadings[4])
    -- display.settext(displayItems[5], formattedReadings[5])
    -- display.settext(displayItems[6], formattedReadings[6])
    -- display.settext(displayItems[7], formattedReadings[7])
    -- display.settext(displayItems[8], formattedReadings[8])
end

function round(x, n)
    n = math.pow(10, n or 0)
    x = x * n
    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end
    return x / n
end


function main() -- Does nothing in this App, here for posterity
end

--------------------------------- Script starts here ---------------------------------------
-- Global Settings
absUncertaintyRoundingDigits = 6
absUncertaintyDisplayDigits = buffer.DIGITS_3_5
relUncertaintyRoundingDigits = 2


-- Call opening functions and main()
local continue = precheck()
if continue == false then exit()
else
    --reset()
    collectgarbage() -- Built-in function
    setup()
    main()
end

endscript

loadimage uncertainty_icon Uncertainty
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
endimage

Uncertainty.save()
