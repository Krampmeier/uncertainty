loadscript Uncertainty
-- $Title: Measurement Uncertainty
-- $Product: DAQ6510, DMM6500
-- $Tag: Measurement uncertainty, Tolerance, Error margin
-- $Description: Displays the measurement uncertainty of the currently measured value
-- $Requires: v1.0.01f
-- $Icon: uncertainty_icon
-- Last Updated: $Date: 2024-10-19
--[[
Script: Uncertainty.tspa
Written by: Johannes Raschke
Based on Brad Odhner's Probe_Hold.tspa (Keithley Applications Engineering)
`
***********************************************************
*** Copyright 2024 Johannes Raschke                     ***
*** See www.tek.com/sample-license for licensing terms. ***
***********************************************************

TODO: 
* Funktion zur Berechnung der Unsicherheiten als Zahlenwerte auslagern für Remote-Betrieb
  (mit Berücksichtigung der aktuellen Messfunktionen)
* Alle Messfunktionen des K6500 unterstützen
* Zusätzliche Fehler durch NPLC berücksichtigen
* Zusätzliche Fehler durch Autozero off berücksichtigen
* Konfigurationsseite für Kalibrierinterval einfügen (oder: kann man das abfragen?)
* Konfigurationsseite für AC-Frequenz einfügen
* Berechnungsgrundlage der Unsicherheit als String zusammenbasteln
* K7510 unterstützen
]]--

function precheck() -- Checks that the script will work with the current settings
    user_func = dmm.measure.func
    if user_func == dmm.FUNC_NONE then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Digitize functions, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end
    elseif user_func == dmm.FUNC_TEMPERATURE then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Temperature function, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end
    elseif user_func == dmm.FUNC_CONTINUITY then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Continuity function, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end    
    elseif user_func == dmm.FUNC_DCV_RATIO then 
        local selection = display.prompt(display.BUTTONS_YESNO, 'Not compatible with Ration function, set function to DC Voltage and continue? You can change the function later.')
        if selection == display.BUTTON_YES then 
            user_func = dmm.FUNC_DC_VOLTAGE
            return true 
        else 
            return false
        end    
    end
end -- precheck()

function createMainScreen() -- Create grid lines on the swipe screen
	-- Create grid line for each reading.
    local gridLines = {}
	
    -- Create swipe screen
    swipe_id = display.create(display.SCREEN_HOME, display.OBJ_SWIPE, 'Uncertainty')
    
    -- Column lines
	gridLines[1] = display.create(swipe_id, display.OBJ_LINE, 1, 5, 1, 200)
	gridLines[2] = display.create(swipe_id, display.OBJ_LINE, 250, 5, 250, 200)
    gridLines[3] = display.create(swipe_id, display.OBJ_LINE, 620, 5, 620, 200)
	-- Row lines
	gridLines[4] = display.create(swipe_id, display.OBJ_LINE, 1, 50, 620, 50)
	gridLines[5] = display.create(swipe_id, display.OBJ_LINE, 1, 100, 620, 100)
	gridLines[6] = display.create(swipe_id, display.OBJ_LINE, 1, 150, 620, 150)

	for i = 1, table.getn(gridLines) do
		display.setcolor(gridLines[i], 0x7f7f7f)
	end

    -- Now Create objects on the swipe screen that aren't the grid lines
    displayItems[1] = display.create(swipe_id, display.OBJ_TEXT, 12, 35, "Abs. uncertainty", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	displayItems[2] = display.create(swipe_id, display.OBJ_TEXT, 12, 85,   "Rel. uncertainty", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	-- displayItems[3] = display.create(swipe_id, display.OBJ_TEXT, 12, 135,  formattedReadings[3], display.COLOR_MEASUREMENT, display.FONT_LARGE)
	displayItems[4] = display.create(swipe_id, display.OBJ_TEXT, 12, 185,  "Cal. interval", display.COLOR_MEASUREMENT, display.FONT_LARGE)

	displayItems[5] = display.create(swipe_id, display.OBJ_TEXT, 251, 35,  "---", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	displayItems[6] = display.create(swipe_id, display.OBJ_TEXT, 251, 85,  "---", display.COLOR_MEASUREMENT, display.FONT_LARGE)
	-- displayItems[7] = display.create(swipe_id, display.OBJ_TEXT, 251, 135, formattedReadings[7], display.COLOR_MEASUREMENT, display.FONT_LARGE)
	displayItems[8] = display.create(swipe_id, display.OBJ_TEXT, 251, 185, "---", display.COLOR_MEASUREMENT, display.FONT_LARGE)

    -- Settings button
    settings_button_id = display.create(swipe_id, display.OBJ_BUTTON, 625, 20, "Settings")
    display.setevent(settings_button_id, display.EVENT_PRESS, "open_settings()")

    screen_is_setup = 1 --if the script is restarted this will stop multiple swipe screens being created
end

function open_settings() -- Opens the settings screen
    about_id = display.create(display.ROOT, display.OBJ_SCREEN, 'Uncertainty Settings')

    local calibrationInterval_id = display.create(about_id, display.OBJ_EDIT_OPTION, 200, 10, "Cal. interval", "Calibration interval", "24 h", "90 days", "1 year", "2 years")
    display.setevent(calibrationInterval_id, display.EVENT_PRESS, "cal_interval_setting_event(%value)")
    display.setvalue(calibrationInterval_id, calibrationInterval)

	--local tolerance_id = display.create(settings_id, display.OBJ_EDIT_NUMBER, 200, 90, "Probe Hold Tolerance", "1 to 100 percent", display.NFORMAT_INTEGER, readTolerance*100, 1, 100, "%")
	--display.setevent(tolerance_id, display.EVENT_PRESS, "tolerance_press_event(%value)")

    --local threshold_id = display.create(settings_id, display.OBJ_EDIT_NUMBER, 200, 170, "Low Threshold", "Ignore readings below threshold", display.NFORMAT_USER, threshold, 0)
    --display.setevent(threshold_id, display.EVENT_PRESS, "threshold_press_event(%value)")

    --local repeat_id = display.create(settings_id, display.OBJ_EDIT_NUMBER, 200, 250, "Repeat Tolerance", "Repeat readings are ignored", display.NFORMAT_INTEGER, repeatTolerance*100, 1, 100, '%')
    --display.setevent(repeat_id, display.EVENT_PRESS, "repeat_press_event(%value)")

    local exit_id = display.create(about_id, display.OBJ_BUTTON, 350, 360, "Back")
    display.setevent(exit_id, display.EVENT_PRESS, "close_settings()")
end

function cal_interval_setting_event(v) -- the selector passes 1 for 24h, 2 for 90 days, 3 for 1 year, 4 for 2 years
	calibrationInterval = v
end

function close_settings() -- Closes the settings screen and goes back to swipe_id
    display.changescreen(display.SCREEN_HOME)
    display.delete(about_id)
    delay() -- Needed to allow change to swipe_id?
    display.changescreen(swipe_id)
    collectgarbage()
end

function getUnitSymbol()    
    local func = dmm.measure.func
        if     func == dmm.FUNC_DC_VOLTAGE      then unitString = "V"
        elseif func == dmm.FUNC_DC_CURRENT      then unitString = "A"
        elseif func == dmm.FUNC_RESISTANCE      then unitString = "\018"
        elseif func == dmm.FUNC_4W_RESISTANCE   then unitString = "\018"
        elseif func == dmm.FUNC_CAPACITANCE     then unitString = "F"
        elseif func == dmm.FUNC_AC_VOLTAGE      then unitString = "V"
        elseif func == dmm.FUNC_AC_CURRENT      then unitString = "A"
        elseif func == dmm.FUNC_ACV_FREQUENCY   then unitString = "Hz"
        elseif func == dmm.FUNC_ACV_PERIOD      then unitString = "s"
        else unitString = "X"
        end    
        return unitString
end

-- take a float value,
--  - convert it to max. 3 digits before the decimal point and
--  - add a unit prefix (e.g. for "kilo")
--  - return the resulting string
-- This does not add the unit itself!
function prettyPrintValue(value)
    local unitPrefix = ""
    if value < 1e-9 then
        value = value * 1e12 -- pico-unit
        unitPrefix = "p"
    elseif value < 1e-6 then
        value = value * 1e9 -- nano-unit
        unitPrefix = "n"
    elseif value < 1e-3 then
        value = value * 1e6 -- micro-unit
        unitPrefix = "\020"
    elseif value < 1.0 then
        value = value * 1e3 -- milli-unit
        unitPrefix = "m"
    elseif value < 1e3 then
        value = value -- 1 ... 1000 --> no unit prefix
        unitPrefix = ""
    elseif value < 1e6 then
        value = value / 1e3 -- kilo-unit
        unitPrefix = "k"
    elseif value < 1e9 then
        value = value / 1e6 -- Mega-unit
        unitPrefix = "M"
    end
    value = round(value, absUncertaintyRoundingDigits)
    prettyString = tostring(value) .. " " .. unitPrefix
    return prettyString
end

function setup() -- Calls other init functions and creates the timers
    
    -- create "defines" and global variables
    displayItems = {} -- Table that contains ids of the text object that display the values, filled in print_uncertainties()
    unitString = ""
      
    calibrationInterval = calibrationInterval_1year -- set the default
    
    -- Recover user's previous function
    dmm.measure.func = user_func
    
    --if screen_is_setup ~= 1 
    --then
         createMainScreen()
    --end --prevents multiple swipe screens being created
    
    -- Setup timers for ongoing stuff
	read_timer_id = display.create(swipe_id, display.OBJ_TIMER, 0.5, display.TIMER_FOREVER, "takeReading()")
	garbage_timer_id = display.create(swipe_id, display.OBJ_TIMER, 60, display.TIMER_FOREVER, "collectgarbage()")
    
    display.changescreen(display.SCREEN_HOME) -- Go to the newly created screen
    display.changescreen(swipe_id)

    takeReading()
end

function check_valid(reading) -- Takes the most recent reading and verifies it's a reading I want
    if reading == 9.9e+37 then return false end -- Don't allow overflows  
    return true -- Reading is valid
end

function takeReading() -- take a reading and display the uncertainty
    dmm.measure.read(defbuffer1)    
    update_uncertainties();
end

-- return the function which calculates the uncertainties for the readings in the
-- currently used measurement mode of the instrument
function getUncertaintyFunction()
    local func = dmm.measure.func
    if     func == dmm.FUNC_DC_VOLTAGE      then return getDcvUncertainty
    elseif func == dmm.FUNC_DC_CURRENT      then return getDciUncertainty
    elseif func == dmm.FUNC_RESISTANCE      then return getResistanceUncertainty
    elseif func == dmm.FUNC_4W_RESISTANCE   then return getResistanceUncertainty
--    elseif func == dmm.FUNC_CAPACITANCE     then bufferUnit = buffer.UNIT_FARAD
--    elseif func == dmm.FUNC_AC_VOLTAGE      then bufferUnit = buffer.UNIT_VOLT_AC
--    elseif func == dmm.FUNC_AC_CURRENT      then bufferUnit = buffer.UNIT_AMP_AC
--    elseif func == dmm.FUNC_ACV_FREQUENCY   then bufferUnit = buffer.UNIT_HERTZ
--    elseif func == dmm.FUNC_ACV_PERIOD      then bufferUnit = buffer.UNIT_SECOND
--    elseif func == dmm.FUNC_DCV_RATIO       then bufferUnit = buffer.UNIT_RATIO
    else return getNoUncertainty
    end
 end


function getDcvUncertainty(reading, range, calInterval)
    local baseUncertainty = getDcvBaseUncertainty(reading, range, calInterval)
    local additionalUncertainty = getDcvAdditionalUncertainty(reading, range, calInterval)
    return baseUncertainty + additionalUncertainty
end

function getDciUncertainty(reading, range, calInterval)
    local baseUncertainty = getDciBaseUncertainty(reading, range, calInterval)
    local additionalUncertainty = getDciAdditionalUncertainty(reading, range, calInterval)
    return baseUncertainty + additionalUncertainty
end

function getResistanceUncertainty(reading, range, calInterval)
    local baseUncertainty = getResistanceBaseUncertainty(reading, range, calInterval)
    local additionalUncertainty = getResistanceAdditionalUncertainty(reading, range, calInterval)
    return baseUncertainty + additionalUncertainty
end

function getDcvBaseUncertainty(reading, range, calInterval)    -- return measurement uncertainty in V
    local uncertOfReading = 0
    local uncertOfRange = 0
    if(calInterval == calibrationInterval_24h) then
        if range == 0.1 then 
            uncertOfReading = 0.0015/100
            uncertOfRange = 0.0030/100
        elseif range == 1 then
            uncertOfReading = 0.0015/100 
            uncertOfRange = 0.0006/100
        elseif range == 10 then
            uncertOfReading = 0.0010/100
            uncertOfRange = 0.0004/100
        elseif range == 100 then
            uncertOfReading = 0.0015/100
            uncertOfRange = 0.0006/100
        elseif range == 1000 then
            uncertOfReading = 0.0020/100
            uncertOfRange = 0.0006/100
        end
    elseif(calInterval == calibrationInterval_90days) then
        if range == 0.1 then 
            uncertOfReading = 0.0025/100
            uncertOfRange = 0.0035/100
        elseif range == 1 then
            uncertOfReading = 0.0020/100 
            uncertOfRange = 0.0006/100
        elseif range == 10 then
            uncertOfReading = 0.0020/100
            uncertOfRange = 0.0005/100
        elseif range == 100 then
            uncertOfReading = 0.0035/100
            uncertOfRange = 0.0006/100
        elseif range == 1000 then
            uncertOfReading = 0.0035/100
            uncertOfRange = 0.0006/100
        end
    elseif(calInterval == calibrationInterval_1year) then
        if range == 0.1 then 
            uncertOfReading = 0.0030/100
            uncertOfRange = 0.0035/100
        elseif range == 1 then
            uncertOfReading = 0.0025/100 
            uncertOfRange = 0.0006/100
        elseif range == 10 then
            uncertOfReading = 0.0025/100
            uncertOfRange = 0.0005/100
        elseif range == 100 then
            uncertOfReading = 0.0040/100
            uncertOfRange = 0.0006/100
        elseif range == 1000 then
            uncertOfReading = 0.0040/100
            uncertOfRange = 0.0006/100
        end
    elseif(calInterval == calibrationInterval_2years) then
        if range == 0.1 then 
            uncertOfReading = 0.0035/100
            uncertOfRange = 0.0035/100
        elseif range == 1 then
            uncertOfReading = 0.0030/100 
            uncertOfRange = 0.0006/100
        elseif range == 10 then
            uncertOfReading = 0.0030/100
            uncertOfRange = 0.0005/100
        elseif range == 100 then
            uncertOfReading = 0.0050/100
            uncertOfRange = 0.0006/100
        elseif range == 1000 then
            uncertOfReading = 0.0050/100
            uncertOfRange = 0.0006/100
        end
    end
    return reading*uncertOfReading + range * uncertOfRange
end

function getDcvAdditionalUncertainty(reading, range, calInterval)
    local noiseOfRange = 0
    local noiseFixedValue = 0
    local noAutoZeroUncertOfRange = 0
    local noAutoZeroUncertFixedValue = 0
    local nplc = dmm.measure.nplc -- numeric
    local lineSyncState = dmm.measure.linesync -- dmm.OFF or dmm.ON
    local autoZeroState = dmm.measure.autozero.enable -- dmm.OFF or dmm.ON

    -- handle MEASUREMENT NOISE CHARACTERISTICS
    if(nplc < 0.01) then -- spec sheet specifies 0.0005 PLC, I assume the values are valid from 0.0005 - 0.01 PLC
        noiseOfRange = 0.00500/100
        noiseFixedValue = 40e-6 -- 40 uV
    elseif (nplc < 0.1) then -- spec sheet specifies 0.01 PLC, I assume the values are valid from 0.01 - 0.1 PLC
        noiseOfRange = 0.00030/100
        noiseFixedValue = 6e-6 -- 6 uV
    elseif (nplc < 1.0) then -- spec sheet specifies 0.1 PLC, I assume the values are valid from 0.1 - 1 PLC
        noiseOfRange = 0.00015/100
        if(lineSyncState == dmm.OFF) then
            noiseFixedValue = 4e-6 -- 4 uV
        else -- line sync on
            noiseFixedValue = 1e-6 -- 1 uV
        end
    -- no additional noise penalty for NPLC >= 1
    end

    -- handle "autozero off" penalty
    if(autoZeroState == dmm.OFF) then
        noAutoZeroUncertOfRange = 0.0010/100 -- assuming worst specified case: within ±5 °C and ≤ 60 minutes since last autozero
        noAutoZeroUncertFixedValue = 10.0e-6 -- 10 uV
    end
    return range * (noiseOfRange + noAutoZeroUncertOfRange) + noiseFixedValue + noAutoZeroUncertFixedValue    
end

function getDciBaseUncertainty(reading, range, calInterval) -- return measurement uncertainty in A
    local uncertOfReading = 0
    local uncertOfRange = 0
    if(calInterval == calibrationInterval_24h) then
        if range == 0.00001 then -- 10 µA
            return reading * 0.007/100 + range * 0.002/100
        elseif range == 0.0001 then -- 100 µA
            return reading * 0.010/100 + range * 0.002/100
        elseif range == 0.001 then -- 1 mA
            return reading * 0.007/100 + range * 0.006/100
        elseif range == 0.01 then -- 10 mA
            return reading * 0.006/100 + range * 0.003/100
        elseif range == 0.1 then
            return reading * 0.010/100 + range * 0.003/100
        elseif range == 1 then
            return reading * 0.020/100 + range * 0.004/100
        elseif range == 3 then
            return reading * 0.030/100 + range * 0.004/100
        elseif range == 10 then
            return reading * 0.140/100 + range * 0.025/100
        end
    elseif(calInterval == calibrationInterval_90days) then
        if range == 0.00001 then -- 10 µA
            return reading * 0.035/100 + range * 0.005/100
        elseif range == 0.0001 then -- 100 µA
            return reading * 0.035/100 + range * 0.005/100
        elseif range == 0.001 then -- 1 mA
            return reading * 0.035/100 + range * 0.005/100
        elseif range == 0.01 then -- 10 mA
            return reading * 0.018/100 + range * 0.005/100
        elseif range == 0.1 then
            return reading * 0.015/100 + range * 0.005/100
        elseif range == 1 then
            return reading * 0.030/100 + range * 0.005/100
        elseif range == 3 then
            return reading * 0.040/100 + range * 0.004/100
        elseif range == 10 then
            return reading * 0.190/100 + range * 0.025/100
        end
    elseif(calInterval == calibrationInterval_1year) then
        if range == 0.00001 then -- 10 µA
            return reading * 0.045/100 + range * 0.005/100
        elseif range == 0.0001 then -- 100 µA
            return reading * 0.045/100 + range * 0.005/100
        elseif range == 0.001 then -- 1 mA
            return reading * 0.045/100 + range * 0.005/100
        elseif range == 0.01 then -- 10 mA
            return reading * 0.020/100 + range * 0.005/100
        elseif range == 0.1 then
            return reading * 0.020/100 + range * 0.005/100
        elseif range == 1 then
            return reading * 0.040/100 + range * 0.005/100
        elseif range == 3 then
            return reading * 0.050/100 + range * 0.004/100
        elseif range == 10 then
            return reading * 0.220/100 + range * 0.025/100
        end
    elseif (calInterval == calibrationInterval_2years) then
        if range == 0.00001 then -- 10 µA
            return reading * 0.055/100 + range * 0.005/100
        elseif range == 0.0001 then -- 100 µA
            return reading * 0.055/100 + range * 0.005/100
        elseif range == 0.001 then -- 1 mA
            return reading * 0.055/100 + range * 0.005/100
        elseif range == 0.01 then -- 10 mA
            return reading * 0.025/100 + range * 0.005/100
        elseif range == 0.1 then
            return reading * 0.025/100 + range * 0.005/100
        elseif range == 1 then
            return reading * 0.050/100 + range * 0.005/100
        elseif range == 3 then
            return reading * 0.060/100 + range * 0.004/100
        elseif range == 10 then
            return reading * 0.250/100 + range * 0.025/100
        end
    end
end

function getDciAdditionalUncertainty(reading, range, calInterval)
    local noiseOfRange = 0
    local noiseFixedValue = 0
    local noAutoZeroUncertOfRange = 0
    local noAutoZeroUncertFixedValue = 0
    local nplc = dmm.measure.nplc -- numeric
    local lineSyncState = dmm.measure.linesync -- dmm.OFF or dmm.ON
    local autoZeroState = dmm.measure.autozero.enable -- dmm.OFF or dmm.ON

    -- handle MEASUREMENT NOISE CHARACTERISTICS
    if(nplc < 0.01) then -- spec sheet specifies 0.0005 PLC, I assume the values are valid from 0.0005 - 0.01 PLC
        noiseOfRange = 0.0200/100
        noiseFixedValue = 5e-9 -- 5 nA
    elseif (nplc < 0.1) then -- spec sheet specifies 0.01 PLC, I assume the values are valid from 0.01 - 0.1 PLC
        noiseOfRange = 0.0030/100
        noiseFixedValue = 5e-9
    elseif (nplc < 1.0) then -- spec sheet specifies 0.1 PLC, I assume the values are valid from 0.1 - 1 PLC        
        if(lineSyncState == dmm.OFF) then
            noiseOfRange = 0.0015/100
            noiseFixedValue = 5e-9
        else -- line sync on
            noiseOfRange = 0.0009/100
            noiseFixedValue = 10e-12 -- 10 pA
        end
    -- no additional noise penalty for NPLC >= 1
    end

    -- handle "autozero off" penalty
    if(autoZeroState == dmm.OFF) then
        noAutoZeroUncertOfRange = 0.015/100 -- assuming worst specified case: within ±5 °C and ≤ 60 minutes since last autozero
        noAutoZeroUncertFixedValue = 0.0 -- none specified
    end
    return range * (noiseOfRange + noAutoZeroUncertOfRange) + noiseFixedValue + noAutoZeroUncertFixedValue    
end

function getResistanceBaseUncertainty(reading, range, calInterval) -- return measurement uncertainty in A
    local uncertOfReading = 0
    local uncertOfRange = 0
    if(calInterval == calibrationInterval_24h) then
        if range == 1 then
            return reading * 0.0080/100 + range * 0.0200/100
        elseif range == 10 then
            return reading * 0.0020/100 + range * 0.0020/100
        elseif range == 100 then
            return reading * 0.0020/100 + range * 0.0020/100
        elseif range == 1000 then
            return reading * 0.0020/100 + range * 0.0006/100
        elseif range == 10000 then   -- 10k
            return reading * 0.0020/100 + range * 0.0006/100
        elseif range == 100000 then  -- 100k
            return reading * 0.0020/100 + range * 0.0006/100
        elseif range == 1000000 then -- 1 Meg
            return reading * 0.0020/100 + range * 0.0006/100
        elseif range == 10000000 then -- 10 Meg
            return reading * 0.0150/100 + range * 0.0006/100
        elseif range == 100000000 then -- 100 Meg
            return reading * 0.0800/100 + range * 0.0030/100
        end
    elseif(calInterval == calibrationInterval_90days) then
        if range == 1 then
            return reading * 0.0080/100 + range * 0.0200/100
        elseif range == 10 then
            return reading * 0.0080/100 + range * 0.0020/100
        elseif range == 100 then
            return reading * 0.0075/100 + range * 0.0020/100
        elseif range == 1000 then
            return reading * 0.0065/100 + range * 0.0006/100
        elseif range == 10000 then   -- 10k
            return reading * 0.0065/100 + range * 0.0006/100
        elseif range == 100000 then  -- 100k
            return reading * 0.0070/100 + range * 0.0010/100
        elseif range == 1000000 then -- 1 Meg
            return reading * 0.0075/100 + range * 0.0006/100
        elseif range == 10000000 then -- 10 Meg
            return reading * 0.0200/100 + range * 0.0010/100
        elseif range == 100000000 then -- 100 Meg
            return reading * 0.2000/100 + range * 0.0030/100
        end
    elseif(calInterval == calibrationInterval_1year) then
        if range == 1 then
            return reading * 0.0085/100 + range * 0.0200/100
        elseif range == 10 then
            return reading * 0.0085/100 + range * 0.0020/100
        elseif range == 100 then
            return reading * 0.0085/100 + range * 0.0020/100
        elseif range == 1000 then
            return reading * 0.0075/100 + range * 0.0006/100
        elseif range == 10000 then   --10k
            return reading * 0.0075/100 + range * 0.0006/100
        elseif range == 100000 then  -- 100k
            return reading * 0.0075/100 + range * 0.0010/100
        elseif range == 1000000 then -- 1 Meg
            return reading * 0.0100/100 + range * 0.0006/100
        elseif range == 10000000 then -- 10 Meg
            return reading * 0.0400/100 + range * 0.0010/100
        elseif range == 100000000 then -- 100 Meg
            return reading * 0.2000/100 + range * 0.0030/100
        end
    elseif (calInterval == calibrationInterval_2years) then
        if range == 1 then
            return reading * 0.0100/100 + range * 0.0200/100
        elseif range == 10 then
            return reading * 0.0100/100 + range * 0.0020/100
        elseif range == 100 then
            return reading * 0.0100/100 + range * 0.0020/100
        elseif range == 1000 then
            return reading * 0.0090/100 + range * 0.0006/100
        elseif range == 10000 then   --10k
            return reading * 0.0090/100 + range * 0.0006/100
        elseif range == 100000 then  -- 100k
            return reading * 0.0100/100 + range * 0.0010/100
        elseif range == 1000000 then -- 1 Meg
            return reading * 0.0120/100 + range * 0.0006/100
        elseif range == 10000000 then -- 10 Meg
            return reading * 0.0450/100 + range * 0.0010/100
        elseif range == 100000000 then -- 100 Meg
            return reading * 0.250/100 + range * 0.0030/100
        end
    end
end

function getResistanceAdditionalUncertainty(reading, range, calInterval)
    local noiseOfRange = 0
    local noiseFixedValue = 0
    local noAutoZeroUncertOfRange = 0
    local noAutoZeroUncertFixedValue = 0
    local TwoWireModeUncertFixedValue = 0
    local nplc = dmm.measure.nplc -- numeric
    local lineSyncState = dmm.measure.linesync -- dmm.OFF or dmm.ON
    local autoZeroState = dmm.measure.autozero.enable -- dmm.OFF or dmm.ON   
    local kelvinConnectionsState = dmm.OFF
    
    if (dmm.measure.func == dmm.FUNC_4W_RESISTANCE) then
        kelvinConnectionsState = dmm.ON
    end

    -- handle MEASUREMENT NOISE CHARACTERISTICS
    if(nplc < 0.01) then -- spec sheet specifies 0.0005 PLC, I assume the values are valid from 0.0005 - 0.01 PLC
        noiseOfRange = 0.00650/100
        noiseFixedValue = 3.5E-3 -- 3.5 mOhm
    elseif (nplc < 0.1) then -- spec sheet specifies 0.01 PLC, I assume the values are valid from 0.01 - 0.1 PLC
        noiseOfRange = 0.00070/100
        noiseFixedValue = 0.5E-3 -- 0.5 mOhm
    elseif (nplc < 1.0) then -- spec sheet specifies 0.1 PLC, I assume the values are valid from 0.1 - 1 PLC        
        if(lineSyncState == dmm.OFF) then
            noiseOfRange = 0.0005/100
            noiseFixedValue = 0.35E-3 -- 0.35 mOhm
        else -- line sync on
            noiseOfRange = 0.00015/100
            noiseFixedValue = 0.1E-3 -- 0.1 mOhm
        end
    -- no additional noise penalty for NPLC >= 1
    end
    if(range ==100) then -- "For 100 Ω range, multiply the listed values by five."
        noiseOfRange = noiseOfRange * 5
        noiseFixedValue = noiseFixedValue * 5
    end
    
    -- handle "autozero off" penalty
    if(autoZeroState == dmm.OFF) then -- assuming worst specified case: within ±5 °C and ≤ 60 minutes since last autozero
        noAutoZeroUncertOfRange = 0.0020/100 
        noAutoZeroUncertFixedValue = 10e-3 -- 10 mOhm
    end

--    if kelvinConnectionsState == dmm.OFF then -- we are in 2-wire resistance mode?
--        TwoWireModeUncertFixedValue = 0.1 -- 100 mOhm penalty
--    else -- 4-wire mode
--        if (dmm.OCOMP_OFF == dmm.measure.offsetcompensation.enable) then -- 4-wire mode, but offset compensation off?
--        end
--    end

    return range * (noiseOfRange + noAutoZeroUncertOfRange) + noiseFixedValue + noAutoZeroUncertFixedValue + TwoWireModeUncertFixedValue
end

function getNoUncertainty(reading, range, calInterval)
    return 0
end

function update_uncertainties() -- Updates the number display
    local reading = defbuffer1[defbuffer1.endindex] -- the last reading that was taken by the meter
    local range = dmm.measure.range

    if check_valid(reading) == false then 
        display.settext(displayItems[5], "---")
        display.settext(displayItems[6], "---")
    else
        local uncertaintyFunction = getUncertaintyFunction();
        local uncertainty = uncertaintyFunction(math.abs(reading), range, calibrationInterval)
        display.settext(displayItems[5], prettyPrintValue(uncertainty) .. getUnitSymbol()) -- absolute uncertainty
        if(reading ~= 0.0) then
            display.settext(displayItems[6], tostring(round(uncertainty/reading*1e6, relUncertaintyRoundingDigits)) .. " " .. "ppm") -- relative uncertainty
        else
            display.settext(displayItems[6], "--- " .. "ppm") -- relative uncertainty
        end

        display.settext(displayItems[8], tostring(calibrationInterval)) -- for testing
    end
    --display.settext(displayItems[2], "Updated!")
    -- display.settext(displayItems[3], formattedReadings[3])
    -- display.settext(displayItems[4], formattedReadings[4])
    -- display.settext(displayItems[5], formattedReadings[5])
    -- display.settext(displayItems[6], formattedReadings[6])
    -- display.settext(displayItems[7], formattedReadings[7])
    -- display.settext(displayItems[8], formattedReadings[8])
end

function round(vaule, digits)
    digits = math.pow(10, digits or 0)
    vaule = vaule * digits
    if vaule >= 0 then vaule = math.floor(vaule + 0.5) else vaule = math.ceil(vaule - 0.5) end
    return vaule / digits
end


function main() -- Does nothing in this App, here for posterity
end

--------------------------------- Script starts here ---------------------------------------
-- Global Settings

-- define values to use for calibrationInterval (like an enum)
calibrationInterval_24h    = 1
calibrationInterval_90days = 2
calibrationInterval_1year  = 3
calibrationInterval_2years = 4

-- define display settings
absUncertaintyRoundingDigits = 2
relUncertaintyRoundingDigits = 2

-- Call opening functions and main()
local continue = precheck()
if continue == false then exit()
else
    --reset()
    collectgarbage() -- Built-in function
    setup()
    main()
end

endscript

loadimage uncertainty_icon Uncertainty
iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAIAAAC1nk4lAAADkklEQVRo3u2ZQUjbYBTH3xd0l9KLQsUNhOlgl4FUGlMYuwzxICNeI14i8yBM5qFHD8XDjh4qFXZosRex7GbZaYxdvDRN
tyI7CW4yQcSC7iC7TNbs8OTrRxptkub7jJBHKWkIyS//vrzv/16IZVlw30KCexgRdAQdQYcg+twfatRrxr4JAI3Pn+jO5NS0Mi4rqcnQKb1R3CSEpGVlZXGZJcYbSMsKIWSjuCkMmty+
uGwUN1cWlwEgV8jbWEvliq6pKDbdUzUNEapbN4euqbqmVk0Df3YeXDUNvBldU3OFPN5DrpC3vMftJLa4VtoaJeyd1D4YaVnJxuLZ3/1npB93DvefnV4N0WNmvj+k2yfrxzP/nuN2qVzJ
FfKliWJXvb4++9VO0wcXrb8D1z+eXtyYGD+tdnrYoKUjaD0GAICDATfQ1zkz0UjMDwJAc/s8+S3JD9rhQZSOIBuL+8g0CpqYH2xMNMRVD+kIACCbuPR3ukeZkeb2OXKfrB+LgF5rxrOx
uD+ZaSTmB5EbvwXVad8yU7Exs7mK3Y4XTyT8BHI2ROe4uFijZK0Zd1D6YAAAsIB0rR5sUI0fZUb4Vo9s4vLL8J9gVeGRIbxcHi0jd2aYhqyrUOW0veS9PI3R5A5ttF0e2mVlXDb2zbev
3zgcSoinecPC3Cx6QMez9XJyyWY4bR6/xyiVK8q4zDE9qA9OTk0H6Oi52GubP0YDzdpof5a3ahqevLWnk0uOqixlVt+vv3NsE902lPsmALjJ5mA6F5QZOxHLV6DMnf9VUAGOl2S5vV6b
N7EzdCd3rpB3CYHEnhI0MGjKjbhd0WmHi1YRN/iJ3aWk4wKxlFnFZ4uWcBwbYOCMQdfU5NT0yuIyQu8dtpCbR8nrvg4Z9RpWEhwmscWBTj+WMqsIh3MS3txuF09c5G2LpeNMTAQ3j5zD
qQ3bB/mb4Hh+EHsJrCEUOnBuXrUJi4mN2/dq5a169BILc7M/6h/ZPXuHLV1Tt3Z2BT2IPsKo19KyYuvtA+Hm+CZASU3aBsSYMKVyhRDi3nsJVfqmJOm9FHKHxiTBIsjSI7e/q3N/UYRJ
grhjqVdsnlCbEDqlad+KYnfqnSvkvfYKgqDZJLGh7x22vDIIeo+opCZ1TWU1ZlPFayXpA1GxtbNLCBlLOZSRUBim2z0JvjTrhUEoNPUkbPhocAQ9iI5dBfZEPtaXO4AO73w6go6gI+gI
OoIOJv4D3PJ82t17xxcAAAAASUVORK5CYII=
endimage

Uncertainty.save()
